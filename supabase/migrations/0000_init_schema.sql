-- 1. Create profiles table (linked to auth.users)
create table
  public.profiles (
    id uuid not null primary key references auth.users (id) on delete cascade,
    full_name text,
    email text,
    -- Roles: user, admin, secretary, treasurer, program_lead, media_lead, county_admin
    "role" text not null default 'user'::text,
    county text
  );

-- Function to copy new users from auth.users to public.profiles
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, email, full_name)
  values (new.id, new.email, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$;

-- Trigger to run the function on new user signup
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- 2. Create volunteers table
create table
  public.volunteers (
    id bigint generated by default as identity primary key,
    full_name text not null,
    email text not null,
    phone text,
    county_interest text not null,
    skills text,
    status text not null default 'pending'::text, -- 'pending', 'approved', 'rejected'
    submitted_at timestamp with time zone not null default now()
  );

-- 3. Create reports table
create table
  public.reports (
    id bigint generated by default as identity primary key,
    title text not null,
    file_url text not null,
    report_type text default 'activity'::text,
    "year" integer,
    uploaded_by uuid references public.profiles (id) on delete set null,
    created_at timestamp with time zone not null default now()
  );

-- 4. Create media table
create table
  public.media (
    id bigint generated by default as identity primary key,
    title text,
    media_url text not null,
    "type" text not null default 'image'::text, -- 'image', 'video'
    uploaded_by uuid references public.profiles (id) on delete set null,
    created_at timestamp with time zone not null default now()
  );

-- 5. Create donations table
create table
  public.donations (
    id bigint generated by default as identity primary key,
    amount integer not null, -- Smallest currency unit (e.g., cents)
    currency text not null,
    donor_email text,
    status text not null default 'pending'::text, -- 'pending', 'successful', 'failed'
    payment_provider text not null default 'stripe'::text,
    provider_ref text unique, -- Stripe Session ID
    created_at timestamp with time zone not null default now()
  );

-- 6. Create Supabase Storage Buckets
insert into storage.buckets (id, name, public)
values ('reports', 'reports', true);

insert into storage.buckets (id, name, public)
values ('media', 'media', true);